# my-code

## 一、代码注释规则

1. **文件头部注释**
   每个源代码文件开头，注明文件功能、作者、创建 / 修改时间、版本信息等，例如：

```python
# 文件名：user_management.py
# 功能：用户管理模块，包含用户注册、登录、信息修改等功能
# 作者：张三
# 创建时间：2025-08-09
# 版本：v1.0.0
# 备注：依赖于数据库模块 db_connection.py
```

2. **函数 / 类注释**
   每个函数或类需说明其用途、参数、返回值、异常情况（若有），可使用文档字符串（docstring），例如：

```java
/**
 * 用户登录验证函数
 * @param username 用户名（字符串，非空）
 * @param password 密码（字符串，长度≥6）
 * @return boolean 登录成功返回true，失败返回false
 * @throws IllegalArgumentException 当用户名或密码格式不合法时抛出
 */
public boolean userLogin(String username, String password) {
    // 函数逻辑...
}
```

3. **关键逻辑注释**
   对复杂逻辑、算法步骤、特殊处理（如边界条件、临时解决方案）添加注释，避免 “自注释代码” 的误区（即认为代码本身清晰无需注释），例如：

```javascript
// 计算用户积分：基础分（100）+ 等级系数（等级×10）+ 额外奖励（最多50）
// 注意：新用户（等级0）额外奖励固定为20
function calculateScore(level, isNewUser) {
    let base = 100;
    let levelBonus = level * 10;
    let extra = isNewUser ? 20 : Math.min(50, level * 5); // 老用户额外奖励与等级挂钩，上限50
    return base + levelBonus + extra;
}
```

4. **注释风格统一**

- 单行注释用 `//`（C/C++/Java/JS）或 `#`（Python/Shell），多行注释用 `/* */` 或文档字符串，避免混合使用；

- 注释与代码保持缩进一致，例如：

  ```python
  if age < 18:
      # 未成年人限制：仅允许查看基础内容
      show_basic_content()
  else:
      # 成年人：解锁全部内容
      show_full_content()
  ```

## 二、代码结构与逻辑规则

1. **模块化拆分**
   将功能拆分为独立模块 / 函数，单个函数 / 类专注于单一职责（遵循 “单一职责原则”），例如：
   - 不写 “万能函数”（一个函数同时处理登录、注册、数据统计）；
   - 工具类（如日期处理、加密解密）单独封装，避免重复代码。

2. **命名规范**

- 变量 / 函数 / 类名使用有意义的名称，避免拼音、缩写（通用缩写如id、url除外），例如：
  - 不好：`a`、`temp`、`func1`、`shujv`
  - 好：`userId`、`userList`、`calculateTotalPrice()`、`dataManager`
  - 遵循语言约定：如 Java 类名大写开头（`UserService`）、Python 常量全大写（`MAX_RETRY`）。

3. **逻辑清晰化**

- 避免嵌套过深（建议不超过 3 层），可拆分中间变量或子函数，例如：

```bad
// 嵌套过深，难以阅读
if (user != null) {
    if (user.isActive()) {
        if (user.getRole() == "admin") {
            // 管理员操作...
        }
    }
}
```

```good
// 拆分条件，逻辑更清晰
if (user == null || !user.isActive()) {
    return; // 非活跃用户直接返回
}
if (user.getRole() == "admin") {
    // 管理员操作...
}
```

- 使用 “正向判断” 代替 “负向判断”，例如用 `if (isValid)` 而非 `if (!isNotValid)`。

4. **处理边界条件**
   明确处理空值、异常输入、数组越界等情况，避免程序崩溃，例如：

```python
def get_user_name(user_list, index):
    # 处理索引越界和空列表
    if not user_list or index < 0 or index >= len(user_list):
        return "未知用户"  # 友好返回默认值
    return user_list[index].name
```

## 三、代码格式与可读性规则

1. **缩进与换行**

- 使用统一缩进（4 个空格或 1 个 Tab，避免混合）；
- 运算符前后、逗号后加空格，例如：`a = (b + c) * 2` 而非 `a=(b+c)*2`；
- 长代码换行（如超过 80-120 字符），在逗号或运算符后换行，例如：

```c
int result = calculateSum(dataArray, 0, 100) 
          + calculateAverage(scoreList, 5, 20) 
          - 10; // 换行后对齐，逻辑清晰
```

2. **空行分隔**
   用空行分隔不同逻辑块（如函数之间、循环前后），例如：

   ```javascript
   // 初始化数据
   let users = [];
   let total = 0;
   
   // 读取用户数据
   function loadUsers() {
       // ...
   }
   
   // 计算总人数
   function countTotal() {
       // ...
   }
   ```

3. **避免冗余代码**

- 重复出现 3 次以上的代码块，封装为函数或变量；
- 移除未使用的变量、注释掉的代码（如需保留历史代码，用版本控制工具如 Git 管理）。

## 四、示例：符合规则的代码片段（Python）

```python
# 文件名：order_processing.py
# 功能：订单处理工具，计算订单金额、生成订单号
# 作者：李四
# 创建时间：2025-08-09
# 版本：v1.0.0

import datetime
import random

def generate_order_id(user_id):
    """
    生成唯一订单号
    规则：用户ID（前6位，不足补0）+ 时间戳（年月日时分）+ 随机数（3位）
    @param user_id: 用户ID（整数）
    @return: 字符串类型的订单号，例如"001234202508091530123"
    """
    # 处理用户ID：确保6位，不足前补0
    user_str = f"{user_id:06d}"  # 例如：123 → "000123"
    
    # 获取当前时间戳（年月日时分）
    time_str = datetime.datetime.now().strftime("%Y%m%d%H%M")
    
    # 生成3位随机数（000-999）
    random_str = f"{random.randint(0, 999):03d}"
    
    return user_str + time_str + random_str


def calculate_order_amount(goods_list, discount=0):
    """
    计算订单总金额
    @param goods_list: 商品列表，每个元素为字典{"price": 单价, "quantity": 数量}
    @param discount: 折扣（0-1之间的小数，默认0不打折）
    @return: 浮点型总金额（保留2位小数）
    @throws ValueError: 当折扣不在0-1范围或商品列表为空时抛出
    """
    # 校验输入合法性
    if not goods_list:
        raise ValueError("商品列表不能为空")
    if not (0 <= discount <= 1):
        raise ValueError("折扣必须在0到1之间")
    
    # 计算商品总价（单价×数量之和）
    total = 0.0
    for goods in goods_list:
        # 确保商品有单价和数量字段，且为正数
        price = goods.get("price", 0)
        quantity = goods.get("quantity", 0)
        if price < 0 or quantity < 0:
            raise ValueError(f"商品数据错误：单价{price}或数量{quantity}不能为负数")
        total += price * quantity
    
    # 应用折扣并保留2位小数
    final_amount = total * (1 - discount)
    return round(final_amount, 2)
```

