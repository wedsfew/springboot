---
description: 
globs:
alwaysApply: true
---
### springboot配置自动注解【✅】

### 更新项目文件映射文档 '项目文件映射.md'【进行中】

### 已经配置数据库连接【✅】
- host: localhost
- port: 3306
- username: root
- password: 22222hua
- database: demo

### api接口开发进度【✅】
- 获取所有用户接口  GET /api/users【✅】
- 根据ID获取用户    GET /api/users/{id}【✅】
- 更新用户  PUT /api/users/{id} 【✅】
- 邮箱发送验证码 POST /api/verification/send-code【✅】
- 验证邮箱验证码 POST /api/verification/verify-code【✅】
- 用户注册第一步（发送验证码） POST /api/auth/register/step1【✅】
- 用户注册第二步（验证验证码并完成注册） POST /api/auth/register/step2【✅】
- 用户登录 POST /api/auth/login【✅】
- 实现管理员注册接口 POST /api/admin/register【✅】
- 实现管理员登录接口 POST /api/admin/login【✅】
- 实现获取管理员信息接口 GET /api/admin/{id}【✅】
- 实现更新管理员信息接口 PUT /api/admin/{id}【✅】
- 实现用户登出接口 POST /api/auth/logout【✅】
#### 实现管理员对用户增删改查接口【✅】
  - 获取所有用户 GET /api/admin/users/【✅】
  - 根据ID获取用户 GET /api/admin/users/{id}【✅】
  - 创建用户 POST /api/admin/users【✅】
  - 更新用户 PUT /api/admin/users/{id}【✅】
  - 删除用户 DELETE /api/admin/users/{id}【✅】
  - 根据邮箱查询用户 GET /api/admin/users/email/{email}【✅】

### 全局类【✅】
- 实现全局统一响应类src/main/java/com/example/demo/common/ApiResponse.java【✅】
- 实现全局异常处理类src/main/java/com/example/demo/common/GlobalExceptionHandler.java【✅】

### 所有API接口都使用ApiResponse统一的响应格式【✅】
以下接口实现统一响应格式
- 获取所有用户接口  GET /api/users【✅】
- 根据ID获取用户    GET /api/users/{id}【✅】
- 更新用户  PUT /api/users/{id} 【✅】
- 邮箱发送验证码 POST /api/verification/send-code【✅】
- 验证邮箱验证码 POST /api/verification/verify-code【✅】
- 用户注册第一步（发送验证码） POST /api/auth/register/step1【✅】
- 用户注册第二步（验证验证码并完成注册） POST /api/auth/register/step2【✅】
- 用户登录 POST /api/auth/login【✅】
- 实现管理员注册接口 POST /api/admin/register【✅】
- 实现管理员登录接口 POST /api/admin/login【✅】
- 实现获取管理员信息接口 GET /api/admin/{id}【✅】
- 实现更新管理员信息接口 PUT /api/admin/{id}【✅】
- 实现用户登出接口 POST /api/auth/logout【✅】
- 实现管理员对用户增删改查接口【✅】

### JWT认证过滤器【✅】
- 实现JWT认证过滤器，验证请求中的令牌【✅】
- 更新WebSecurityConfig，保护需要认证的API端点【✅】

### 用户登出功能【✅】
- 实现用户登出接口 POST /api/auth/logout【✅】
- 实现TokenBlacklistService令牌黑名单服务【✅】
- 集成JWT认证过滤器与令牌黑名单检查【✅】
- 测试验证：登出后旧token无法访问受保护接口【✅】


### 密码安全处理【✅】
- 创建用户时对密码进行加密【✅】
- 更新用户时对新密码进行加密【✅】
- API响应中隐藏密码字段【✅】



### DNSPod API接口开发进度【✅】
#### 域名管理接口
- 获取域名列表 GET /api/dnspod/domains【✅】
- 获取域名列表（带分页） GET /api/dnspod/domains/search【✅】
  - 支持分页参数：offset(默认0), limit(默认20)
  - 支持关键字搜索和分组过滤

#### DNS记录管理接口
- 获取记录列表（支持分页） GET /api/dnspod/domains/{domain}/records【✅】
  - 支持分页参数：offset(默认0), limit(默认20)
- 获取记录列表（高级查询） GET /api/dnspod/domains/{domain}/records/search【✅】
  - 支持多种查询条件：子域名、记录类型、线路等
  - 支持分页和排序功能
- 创建记录 POST /api/dnspod/domains/{domain}/records【✅】
  - 支持TTL范围验证(600-86400秒)
- 修改记录 PUT /api/dnspod/domains/{domain}/records/{recordId}【✅】
  - 支持TTL范围验证(600-86400秒)
- 删除记录 DELETE /api/dnspod/domains/{domain}/records/{recordId}【✅】

### 下一步 我想给用户提供免费的3级域名（a.cblog.eu）和dns解析服务，dns解析使用腾讯云的dnspod的api接口，我应该创建什么表才能完善这个项目？这是数据库已有的表.codebuddy/.rules/数据表结构.mdc
这是项目已经完成的api接口api接口文档



### 后续任务业务流程


-用户申请3级域名 → domain_applications表记录申请
-管理员审核通过 → user_domains表创建域名记录
-用户管理DNS记录 → dns_records表存储解析记录
-配额控制 → user_quotas表限制用户资源使用
-操作审计 → operation_logs表记录所有重要操作
- 实现用户权限控制
- 添加令牌刷新功能
